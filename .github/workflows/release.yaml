name: Release and Test
permissions:
    contents: write

on:
  workflow_dispatch:
    inputs:
      bump:
        description: 'Which part to bump: major, minor, or patch'
        required: true
        default: 'patch'

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    steps:
      - name: Fetch latest release tag
        id: fetch_release
        run: |
          echo "Fetching latest release..."
          LATEST_TAG=$(curl -s -H "Accept: application/vnd.github+json" https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest | jq -r .tag_name)
          echo "Latest release tag: $LATEST_TAG"
          if [ "$LATEST_TAG" == "null" ] || [ -z "$LATEST_TAG" ]; then
            echo "No release found. Setting baseline version to v0.0.0"
            LATEST_TAG="v0.0.0"
          fi
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Determine new version
        id: set_version
        run: |
          # Remove leading 'v' from LATEST_TAG
          VERSION_NUM=${LATEST_TAG#v}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_NUM"
          echo "Current version: $MAJOR.$MINOR.$PATCH"
          BUMP="${{ github.event.inputs.bump }}"
          case "$BUMP" in
            major)
              NEW_MAJOR=$((MAJOR + 1))
              NEW_MINOR=0
              NEW_PATCH=0
              ;;
            minor)
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$((MINOR + 1))
              NEW_PATCH=0
              ;;
            patch)
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$MINOR
              NEW_PATCH=$((PATCH + 1))
              ;;
            *)
              echo "Invalid bump input: $BUMP"
              exit 1
              ;;
          esac
          NEW_VERSION="v${NEW_MAJOR}.${NEW_MINOR}.${NEW_PATCH}"
          echo "New version will be: ${NEW_VERSION}"
          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT

  release:
    needs: version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Create Release using GH CLI
        run: |
          gh release create ${{ needs.version.outputs.version }} \
            --title "Release ${{ needs.version.outputs.version }}" \
            --notes "Release notes for version ${{ needs.version.outputs.version }}" \
            --target ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run GoReleaser to attach assets
        uses: goreleaser/goreleaser-action@v2
        with:
          args: release --rm-dist --update
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCKER_USERNAME: rianfowler
          DOCKER_PAT: ${{ secrets.DOCKERHUB_PAT }}

  test:
    needs: [version, release]
    runs-on: ubuntu-latest
    steps:
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
      - name: Add Go bin to PATH
        run: echo "$HOME/go/bin" >> $GITHUB_PATH
      - name: Install CLI from release
        run: |
          go install github.com/rianfowler/ri@${{ needs.version.outputs.version }}
      - name: Verify CLI --help output
        run: ri --help
